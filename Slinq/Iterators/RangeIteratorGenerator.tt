<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\CodeGeneration\IteratorsMethodsGenerator.tt" #>//------------------------------------------------------------------------------
// <auto-generated>look at the RangeIteratorGenerator.tt</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Slinq.Abstract;
using Slinq.Utils;

namespace Slinq.Iterators
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct RangeEnumerator : IStrongEnumerator<int>
    {
        private readonly int _end;
        private int _currentItemIndex;

        internal RangeEnumerator(int start, int end)
        {
            _end = end;
            _currentItemIndex = start - 1;
        }

        public int Current
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return _currentItemIndex; }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool MoveNext()
        {
            return ++_currentItemIndex < _end;
        }
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct RangeIterator : IStrongEnumerable<int, RangeEnumerator>, IFixedCount
    {
        private readonly int _start;
        private readonly int _end;

        public RangeIterator(int start, int count)
        {
            _start = start;
            _end = start + count;
        }

        public int FixedCount
        {
            get { return _end - _start; }
        }

        public RangeEnumerator GetEnumerator()
        {
            return new RangeEnumerator(_start, _end);
        }

        public RangeSelectIterator<T> Select<T>(Func<int, T> selector)
        {
            return new RangeSelectIterator<T>(_start, _end, selector);
        }

        public void ForEach(Action<int> command)
        {
            for (int i = _start; i < _end; i++)
            {
                command(i);
            }
        }

        // it is not about performance but usability
        public void ForEach(Action command)
        {
            for (int i = _start; i < _end; i++)
            {
                command();
            }
        }

<# 
        GenerateIteratorMethodSet(
            loopFrom: "_start", 
            loopTo: "_end", 
            canMoveNext: string.Empty,
            isFixedCount: true); 
#>
    }
}