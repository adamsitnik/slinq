//------------------------------------------------------------------------------
// <auto-generated>look at the SelectIteratorGenerator.tt</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Slinq.Abstract;

namespace Slinq.Iterators
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct SelectEnumerator<TSource, TResult> : IStrongEnumerator<TResult>
    {
        private readonly TSource[] _source;
        private readonly int _actualLength;
        private readonly Func<TSource, TResult> _selector;
        private int _currentItemIndex;

        internal SelectEnumerator(TSource[] source, int actualLength, Func<TSource, TResult> selector)
        {
            _source = source;
            _actualLength = actualLength;
            _selector = selector;
            _currentItemIndex = -1;
        }

        public TResult Current
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return _selector(_source[_currentItemIndex]); }
        }

        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool MoveNext()
        {
            return ++_currentItemIndex < _actualLength;
        }
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct SelectIterator<TSource, TResult> : IStrongEnumerable<TResult, SelectEnumerator<TSource, TResult>>, IFixedCount
    {
        private readonly TSource[] _source;
        private readonly int _actualLength;
        private readonly Func<TSource, TResult> _selector;

        internal SelectIterator(TSource[] source, int actualLength, Func<TSource, TResult> selector)
        {
            _source = source;
            _selector = selector;
            _actualLength = actualLength;
        }

        public int FixedCount
        {
            get { return _actualLength; }
        }

        public SelectEnumerator<TSource, TResult> GetEnumerator()
        {
            return new SelectEnumerator<TSource, TResult>(_source, _actualLength, _selector);
        }

        public SelectWhereIterator<TSource, TResult> Where(Predicate<TResult> predicate)
        {
            return new SelectWhereIterator<TSource, TResult>(_source, _actualLength, _selector, predicate);
        }

        public bool Any()
        {
            int index = 0;
            while (index < _actualLength)
            {
                return true;
            }

            return false;
        }

        public int Count()
        {
            return FixedCount;
        }
    }
}