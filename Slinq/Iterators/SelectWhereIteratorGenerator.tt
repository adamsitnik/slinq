<#@ assembly name="System.Core" #>
<#@ output extension=".cs" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ include file="..\CodeGeneration\IteratorsMethodsGenerator.tt" #>//------------------------------------------------------------------------------
// <auto-generated>look at the SelectWhereIteratorGenerator.tt</auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using Slinq.Abstract;

namespace Slinq.Iterators
{
    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct SelectWhereEnumerator<TSource, TResult> : IStrongEnumerator<TResult>
    {
        // we have so many fields here because "manual inling" is just performing better than pure calls to SelectIterator's MoveNext/Current
        private readonly TSource[] _source;
        private readonly int _actualLength;
        private readonly Func<TSource, TResult> _selector;
        private readonly Predicate<TResult> _predicate;
        private int _currentItemIndex;
        private TResult _current;

        internal SelectWhereEnumerator(TSource[] source, int actualLength, Func<TSource, TResult> selector, Predicate<TResult> predicate)
        {
            _source = source;
            _actualLength = actualLength;
            _selector = selector;
            _predicate = predicate;
            _currentItemIndex = -1;
            _current = default(TResult);
        }

        public TResult Current
        {
            [MethodImpl(MethodImplOptions.AggressiveInlining)]
            get { return _current; }
        }

        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public bool MoveNext()
        {
            while (++_currentItemIndex < _actualLength)
            {
                var next = _selector(_source[_currentItemIndex]);
                if (_predicate(next))
                {
                    _current = next; // the selector might be quite expensive operation so we need to store it's result
                    return true;
                }
            }

            return false;
        }
    }

    [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1815:OverrideEqualsAndOperatorEqualsOnValueTypes", Justification = "Design")]
    public struct SelectWhereIterator<TSource, TResult> : IStrongEnumerable<TResult, SelectWhereEnumerator<TSource, TResult>>
    {
        private readonly TSource[] _source;
        private readonly int _actualLength;
        private readonly Func<TSource, TResult> _selector;
        private readonly Predicate<TResult> _predicate;

        internal SelectWhereIterator(TSource[] source, int actualLength, Func<TSource, TResult> selector, Predicate<TResult> predicate)
        {
            _source = source;
            _actualLength = actualLength;
            _selector = selector;
            _predicate = predicate;
        }

        public SelectWhereEnumerator<TSource, TResult> GetEnumerator()
        {
            return new SelectWhereEnumerator<TSource, TResult>(_source, _actualLength, _selector, _predicate);
        }

<# 
        GenerateIteratorMethodSet(
            loopFrom: "0", 
            loopTo: "_actualLength", 
            canMoveNext: "_predicate(_selector(_source[index]))",
            isFixedCount: false,
            resultType: "TResult",
            current: "_selector(_source[index])"
        ); 
#>
    }
}