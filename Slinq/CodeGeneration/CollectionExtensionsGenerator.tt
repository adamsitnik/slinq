<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 
	public void GenerateCollectionExtension(string type)
    {
#>
// ReSharper disable UnusedMember.Global, ClassTooBig, MethodNamesNotMeaningful, TooManyArguments, MaximumChainedReferences this is an API && we just follow the existing convention
    public static class <#=type#>Extensions
    {
        public static WhereIterator<T> Where<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).Where(predicate);
        }

        public static SelectIterator<TSource, TResult> Select<TSource, TResult>(
            this <#=type#><TSource> source,
            Func<TSource, TResult> selector)
        {
            return ArrayProvider<TSource>.Extract(source).Select(selector);
        }

        public static bool Any<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).Any();
        }

        public static bool Any<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).Any(predicate);
        }

        public static bool All<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).All(predicate);
        }

        public static int Count<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).Count();
        }

        public static int Count<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).Count(predicate);
        }

        public static bool Contains<T>(this <#=type#><T> source, T item)
        {
            return ArrayProvider<T>.Extract(source).Contains(item);
        }

        public static bool Contains<T>(this <#=type#><T> source, T item, IEqualityComparer<T> equalityComparer)
        {
            return ArrayProvider<T>.Extract(source).Contains(item, equalityComparer);
        }

        public static T Aggregate<T>(this <#=type#><T> source, Func<T, T, T> aggregator)
        {
            return ArrayProvider<T>.Extract(source).Aggregate(aggregator);
        }

        public static TAccumulate Aggregate<TSource, TAccumulate>(
            this <#=type#><TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, TAccumulate> aggregator)
        {
            return ArrayProvider<TSource>.Extract(source).Aggregate(seed, aggregator);
        }

        public static TResult Aggregate<TSource, TAccumulate, TResult>(
            this <#=type#><TSource> source,
            TAccumulate seed,
            Func<TAccumulate, TSource, TAccumulate> aggregator,
            Func<TAccumulate, TResult> resultSelector)
        {
            return ArrayProvider<TSource>.Extract(source).Aggregate(seed, aggregator, resultSelector);
        }

        public static T First<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).First();
        }

        public static T First<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).First(predicate);
        }

        public static T FirstOrDefault<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).FirstOrDefault();
        }

        public static T FirstOrDefault<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).FirstOrDefault(predicate);
        }

        public static T Last<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).Last();
        }

        public static T Last<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).Last(predicate);
        }

        public static T LastOrDefault<T>(this <#=type#><T> source)
        {
            return ArrayProvider<T>.Extract(source).LastOrDefault();
        }

        public static T LastOrDefault<T>(this <#=type#><T> source, Predicate<T> predicate)
        {
            return ArrayProvider<T>.Extract(source).LastOrDefault(predicate);
        }

        public static T ElementAt<T>(this <#=type#><T> source, int index)
        {
            return ArrayProvider<T>.Extract(source).ElementAt(index);
        }

        public static T ElementAtOrDefault<T>(this <#=type#><T> source, int index)
        {
            return ArrayProvider<T>.Extract(source).ElementAtOrDefault(index);
        }
<#+
    GenerateMathMethods(type);
#>
    }
// ReSharper restore UnusedMember.Global, ClassTooBig, MethodNamesNotMeaningful, TooManyArguments, MaximumChainedReferences
<#+
    }

    private void GenerateMathMethods(string type)
    {
        GenerateMathMethods(type, "short");
        GenerateMathMethods(type, "int");
        GenerateMathMethods(type, "long");
        GenerateMathMethods(type, "float");
        GenerateMathMethods(type, "double");
    }

    private void GenerateMathMethods(string type, string numericType)
    {
        GenerateMathMethod(type, numericType, "Sum");
        GenerateMathMethod(type, numericType + "?", "Sum");
        GenerateMathMethod(type, numericType, "Min");
        GenerateMathMethod(type, numericType + "?", "Min");
        GenerateMathMethod(type, numericType, "Max");
        GenerateMathMethod(type, numericType + "?", "Max");
        GenerateAverageMethod(type, numericType);
    }

    private void GenerateMathMethod(string type, string numericType, string methodName)
    {
#>

        public static <#=numericType#> <#=methodName#>(this <#=type#><<#=numericType#>> source)
        {
            return ArrayProvider<<#=numericType#>>.Extract(source).<#=methodName#>();
        }
<#+
    }

    private void GenerateAverageMethod(string type, string numericType)
    {
#>

        public static double Average(this <#=type#><<#=numericType#>> source)
        {
            return ArrayProvider<<#=numericType#>>.Extract(source).Average();
        }

        public static double? Average(this <#=type#><<#=numericType#>?> source)
        {
            return ArrayProvider<<#=numericType#>?>.Extract(source).Average();
        }
<#+
    }
#>