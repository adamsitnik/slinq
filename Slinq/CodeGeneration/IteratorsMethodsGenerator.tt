<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 
    public void GenerateIteratorMethodSet(string loopFrom, string loopTo, string canMoveNext, 
        bool isFixedCount, string resultType, string current)
    {
#>
        public bool Any()
        {
            int index = <#=loopFrom#>;
            while (index < <#=loopTo#>)
            {
<#+if(!string.IsNullOrEmpty(canMoveNext)){#>
                if(<#=canMoveNext#>)
                {
                    return true;
                }
                ++index;
<#+}else{#>
                return true;
<#+}#>
            }

            return false;
        }

        public int Count()
        {
<#+if(isFixedCount){#>
            return FixedCount;
<#+}else{#>
            int index = <#=loopFrom#>;
            int count = 0;
            while (index < <#=loopTo#>)
            {
<#+if(!string.IsNullOrEmpty(canMoveNext)){#>
                if(<#=canMoveNext#>)
                {
                    ++count;
                }
                ++index;
<#+}else{#>
                ++count;
                ++index;
<#+}#>
            }

            return count;
<#+}#>
        }

        public <#=resultType#> First()
        {
            int index = <#=loopFrom#>;
            while (index < <#=loopTo#>)
            {
<#+if(!string.IsNullOrEmpty(canMoveNext)){#>
                if(<#=canMoveNext#>)
                {
                    return <#=current#>;
                }
                ++index;
<#+}else{#>
                return <#=current#>;
<#+}#>
            }

            throw Error.NoElements();
        }

        public <#=resultType#> FirstOrDefault()
        {
            int index = <#=loopFrom#>;
            while (index < <#=loopTo#>)
            {
<#+if(!string.IsNullOrEmpty(canMoveNext)){#>
                if(<#=canMoveNext#>)
                {
                    return <#=current#>;
                }
                ++index;
<#+}else{#>
                return <#=current#>;
<#+}#>
            }

            return default(<#=resultType#>);
        }
<#+
    }
#>