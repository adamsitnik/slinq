<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#+ 
    public void GenerateArrayMathExtensionsMethodsSet()
    {
        GenerateArrayMathExtensionsMethodsSet("short");
        GenerateArrayMathExtensionsMethodsSet("int");
        GenerateArrayMathExtensionsMethodsSet("long");
        GenerateArrayMathExtensionsMethodsSet("float");
        GenerateArrayMathExtensionsMethodsSet("double");
    }

    public void GenerateExtractedArrayMathExtensionsMethodsSet()
    {
        GenerateExtractedArrayMathExtensionsMethodsSet("short");
        GenerateExtractedArrayMathExtensionsMethodsSet("int");
        GenerateExtractedArrayMathExtensionsMethodsSet("long");
        GenerateExtractedArrayMathExtensionsMethodsSet("float");
        GenerateExtractedArrayMathExtensionsMethodsSet("double");
    }

    private void GenerateArrayMathExtensionsMethodsSet(string numericType)
    {
        GenerateArrayMathMethodSet(
            accessModifiers: "public static",
            inputType: string.Format("{0}[]", numericType),
            nullableInputType: string.Format("{0}?[]", numericType),
            sourceName: "source",
            lengthName: "source.Length",
            numericType: numericType
        );
    }

    private void GenerateExtractedArrayMathExtensionsMethodsSet(string numericType)
    {
        GenerateArrayMathMethodSet(
            accessModifiers: "internal static",
            inputType: string.Format("ExtractedArray<{0}>", numericType),
            nullableInputType: string.Format("ExtractedArray<{0}?>", numericType),
            sourceName: "source.Array",
            lengthName: "source.ActualLength",
            numericType: numericType
        );
    }

    private void GenerateArrayMathMethodSet(string accessModifiers, string inputType, string nullableInputType, 
        string sourceName, string lengthName, string numericType)
    {
#>

        <#=accessModifiers#> <#=numericType#> Sum(this <#=inputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");

            <#=numericType#> sum = 0;
            for (int i = 0; i < <#=lengthName#> / 16; i += 16)
            {
                checked
                {
                    sum += <#=sourceName#>[i];
                    sum += <#=sourceName#>[unchecked(i + 1)];
                    sum += <#=sourceName#>[unchecked(i + 2)];
                    sum += <#=sourceName#>[unchecked(i + 3)];
                    sum += <#=sourceName#>[unchecked(i + 4)];
                    sum += <#=sourceName#>[unchecked(i + 5)];
                    sum += <#=sourceName#>[unchecked(i + 6)];
                    sum += <#=sourceName#>[unchecked(i + 7)];
                    sum += <#=sourceName#>[unchecked(i + 8)];
                    sum += <#=sourceName#>[unchecked(i + 9)];
                    sum += <#=sourceName#>[unchecked(i + 10)];
                    sum += <#=sourceName#>[unchecked(i + 11)];
                    sum += <#=sourceName#>[unchecked(i + 12)];
                    sum += <#=sourceName#>[unchecked(i + 13)];
                    sum += <#=sourceName#>[unchecked(i + 14)];
                    sum += <#=sourceName#>[unchecked(i + 15)];
                }
            }
            for (int i = (<#=lengthName#> / 16) * 16; i < <#=lengthName#>; i++)
            {
                checked
                {
                    sum += <#=sourceName#>[i];
                }
            }

            return sum;
        }

        <#=accessModifiers#> <#=numericType#>? Sum(this <#=nullableInputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");

            <#=numericType#> sum = 0;
            <#=numericType#>? current;
            for (int i = 0; i < <#=lengthName#>; i++)
            {
                current = <#=sourceName#>[i];
                if (current != null)
                {
                    checked
                    {
                        sum += current.GetValueOrDefault();
                    }
                }
            }

            return sum;
        }

        <#=accessModifiers#> <#=numericType#> Min(this <#=inputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            var min = <#=sourceName#>[0];
            for (int i = 1; i < <#=lengthName#>; i++)
            {
                if (min > <#=sourceName#>[i])
                {
                    min = <#=sourceName#>[i];
                }
            }

            return min;
        }

        <#=accessModifiers#> <#=numericType#>? Min(this <#=nullableInputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            <#=numericType#>? min = null;
            <#=numericType#>? current;
            int i = 0;
            for (; i < <#=lengthName#>; i++)
            {
                current = <#=sourceName#>[i];
                if (current != null)
                {
                    min = current;
                }
            }
            for (; i < <#=lengthName#>; i++)
            {
                current = <#=sourceName#>[i];
                if (current != null
                    && min.Value > current.Value)
                {
                    min = current;
                }
            }

            return min;
        }

        <#=accessModifiers#> <#=numericType#> Max(this <#=inputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            var max = <#=sourceName#>[0];
            for (int i = 1; i < <#=lengthName#>; i++)
            {
                if (max < <#=sourceName#>[i])
                {
                    max = <#=sourceName#>[i];
                }
            }

            return max;
        }

        <#=accessModifiers#> <#=numericType#>? Max(this <#=nullableInputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            <#=numericType#>? max = null;
            <#=numericType#>? current;
            int i = 0;
            for (; i < <#=lengthName#>; i++)
            {
                current = <#=sourceName#>[i];
                if (current != null)
                {
                    max = current;
                }
            }
            for (; i < <#=lengthName#>; i++)
            {
                current = <#=sourceName#>[i];
                if (current != null 
                    && max.Value < current.Value)
                {
                    max = current;
                }
            }

            return max;
        }

        <#=accessModifiers#> double Average(this <#=inputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            return (double)Sum(source) / <#=lengthName#>;
        }

        <#=accessModifiers#> double? Average(this <#=nullableInputType#> source)
        {
            Contract.RequiresNotDefault(source, "source");
            Contract.RequiresNonEmptyCollection(<#=lengthName#>);

            var sum = Sum(source);
            if(sum == null)
            {
                return null;
            }

            return sum.Value / <#=lengthName#>;
        }
<#+
    }
#>