//------------------------------------------------------------------------------
// <auto-generated>just ignore the stylecop</auto-generated>
//------------------------------------------------------------------------------
using System;

namespace Slinq.Profiling.Profiled
{
    public class DateTimeSystemSorterBasedOnOperators
    {
        public void Sort(DateTime[] keys, int index, int length)
        {
            IntrospectiveSort(keys, index, length);
        }

        private static void SwapIfGreaterWithItems(DateTime[] keys, int a, int b)
        {
            if (a != b)
            {
                if (keys[a] > keys[b])
                {
                    DateTime key = keys[a];
                    keys[a] = keys[b];
                    keys[b] = key;
                }
            }
        }

        private static void Swap(DateTime[] a, int i, int j)
        {
            if (i != j)
            {
                DateTime t = a[i];
                a[i] = a[j];
                a[j] = t;
            }
        }

        private static void IntrospectiveSort(DateTime[] keys, int left, int length)
        {
            if (length < 2)
                return;

            IntroSort(keys, left, length + left - 1, 2 * FloorLog2(keys.Length));
        }

        private static int FloorLog2(int i)
        {
            int num = 0;
            while (i >= 1)
            {
                num++;
                i /= 2;
            }

            return num;
        }

        private static void IntroSort(DateTime[] keys, int lo, int hi, int depthLimit)
        {
            while (hi > lo)
            {
                int partitionSize = hi - lo + 1;
                if (partitionSize <= 16)
                {
                    if (partitionSize == 1)
                    {
                        return;
                    }
                    if (partitionSize == 2)
                    {
                        SwapIfGreaterWithItems(keys, lo, hi);
                        return;
                    }
                    if (partitionSize == 3)
                    {
                        SwapIfGreaterWithItems(keys, lo, hi - 1);
                        SwapIfGreaterWithItems(keys, lo, hi);
                        SwapIfGreaterWithItems(keys, hi - 1, hi);
                        return;
                    }

                    InsertionSort(keys, lo, hi);
                    return;
                }

                if (depthLimit == 0)
                {
                    Heapsort(keys, lo, hi);
                    return;
                }
                depthLimit--;

                int p = PickPivotAndPartition(keys, lo, hi);
                // Note we've already partitioned around the pivot and do not have to move the pivot again.
                IntroSort(keys, p + 1, hi, depthLimit);
                hi = p - 1;
            }
        }

        private static int PickPivotAndPartition(DateTime[] keys, int lo, int hi)
        {
            // Compute median-of-three.  But also partition them, since we've done the comparison.
            int middle = lo + ((hi - lo) / 2);

            // Sort lo, mid and hi appropriately, then pick mid as the pivot.
            SwapIfGreaterWithItems(keys, lo, middle);  // swap the low with the mid point
            SwapIfGreaterWithItems(keys, lo, hi);   // swap the low with the high
            SwapIfGreaterWithItems(keys, middle, hi); // swap the middle with the high

            DateTime pivot = keys[middle];
            Swap(keys, middle, hi - 1);
            int left = lo, right = hi - 1;  // We already partitioned lo and hi and put the pivot in hi - 1.  And we pre-increment & decrement below.

            while (left < right)
            {
                while (pivot > keys[++left]) ;
                while (pivot < keys[--right]) ;

                if (left >= right)
                    break;

                Swap(keys, left, right);
            }

            // Put pivot in the right location.
            Swap(keys, left, (hi - 1));
            return left;
        }

        private static void Heapsort(DateTime[] keys, int lo, int hi)
        {
            int n = hi - lo + 1;
            for (int i = n / 2; i >= 1; i = i - 1)
            {
                DownHeap(keys, i, n, lo);
            }
            for (int i = n; i > 1; i = i - 1)
            {
                Swap(keys, lo, lo + i - 1);
                DownHeap(keys, 1, i - 1, lo);
            }
        }

        private static void DownHeap(DateTime[] keys, int i, int n, int lo)
        {
            DateTime d = keys[lo + i - 1];
            int child;
            while (i <= n / 2)
            {
                child = 2 * i;
                if (child < n && (keys[lo + child - 1] < keys[lo + child]))
                {
                    child++;
                }
                if (keys[lo + child - 1] < d)
                    break;
                keys[lo + i - 1] = keys[lo + child - 1];
                i = child;
            }
            keys[lo + i - 1] = d;
        }

        private static void InsertionSort(DateTime[] keys, int lo, int hi)
        {
            int i, j;
            DateTime t;
            for (i = lo; i < hi; i++)
            {
                j = i;
                t = keys[i + 1];
                while (j >= lo && (t < keys[j]))
                {
                    keys[j + 1] = keys[j];
                    j--;
                }
                keys[j + 1] = t;
            }
        }
    }

}